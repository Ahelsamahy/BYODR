File and command locations for specific actions of a service:
	
	Stream0:
		Input =>	raspi\stream\camera.py line 76..............Function that reads the config file of camera0 located in the "/var/lib/docker/volumes/1719714_volume_local_config/_data" directory of the Pi.
		
		Output =>	raspi\stream\camera.py line 125.............Streams are created according to the config file and the settings in the function.
					raspi\stream\camera.py line 126.............Streams are placed inside an app.
					raspi\stream\camera.py line 128.............Camera app is run.
					raspi\stream\camera.py line 139.............HTTP web app with the streams is also created

	Stream1:
		Input =>	raspi\stream\camera.py line 76..............Function that reads the config file of camera1 located in the "/var/lib/docker/volumes/1719714_volume_local_config/_data" directory of the Pi.
		
		Output =>	raspi\stream\camera.py line 125.............Streams are created according to the config file and the settings in the function.
					raspi\stream\camera.py line 126.............Streams are placed inside an app.
					raspi\stream\camera.py line 128.............Camera app is run.
					raspi\stream\camera.py line 139.............HTTP web app with the streams is also created
					
	Zerotier:
		Input => 	Data from the router and Zerotier client.
		
		Output =>	Encrypted data.
		
	Servos:
		Input =>	raspi\ras\servos.py line 435................Declares the JSON Server Thread of this service.
					raspi\ras\servos.py line 442................Starts the main app that includes the server.
				
		Output 1 =>	raspi\stream\app.py line 278/281............Sets up 2 serial usb ports for communication with the motor controllers.
					raspi\stream\app.py line 327/328............Sets speed for the 2 motor controllers with set_effort().
					raspi\ras\core.py line 161..................Declaration of the set_effort() function that sends data to the motor controllers via the serial usb ports.
		
		Output 2 =>	raspi\ras\servos.py line 434................Declares the JSON Publisher.
					raspi\ras\servos.py line 412................Publishes "_data" to the JSON Publisher. _data is a group if data that include
																the status of the chassis, if it is configured, the current motor effort, and the current velocity (if available).
	Battery Management System:
		Input => 	Data from the battery via its I2C hat.
		
		Output => 	Battery management data to the internal BMS system of the battery via the I2C hat.
		
	HTTPD:
		Input =>	httpd\wrap.py line 42.......................The HTTPD server is started.
					Listens for data requests from Teleop, Pilot, Stream1, Stream0. The sources are listed in the configuration file (called haproxy.conf) that the proxy server uses.
					The config file is located in the "/var/lib/docker/volumes/1719716_volume_byodr_config/_data" directory of the Nano.
	
		Output => 	This service forwards the data requests to their proper destination with load balancing in mind.
			
	Inference:
		Input 1 =>	inference/app.py line 426...................Declares the AI camera Camera Thread of this service
		
		Input 2 =>	inference/app.py line 422...................Declares the Teleop JSON Receiver.
					inference/app.py line 428...................Receives the data with pilot.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 118......................Declares the JSON Publisher.
					teleop/app.py line 158......................Publishes "fn_control=teleop_publish" to the JSON publisher.
					teleop/app.py line 140......................The teleop_publish(cmd) function is declared. It returns "cmd['navigator'] = dict(route=route_store.get_selected_route())".
																route_store is a ReloadableDataSource() class object, and get_selected_route() is a function of this class.
					common/byodr/utils/navigate.py line 294.....Declaration of the ReloadableDataSource() class.
					common/byodr/utils/navigate.py line 327.....Declaration of get_selected_route() function that is called above.
					
		Input 3 =>	inference/app.py line 423...................Declares the IPC Chatter JSON Receiver.
					inference/app.py line 428...................Receives the data with ipc_chatter.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 120......................Declares the JSON Publisher.
					teleop/app.py line 127......................Publishes "fn_on_save=on_options_save" to the JSON publisher.
					teleop/app.py line 140......................The on_options_save() function is declared. It publishes time=timestamp(), command='restart'
					common/byodr/utils/__init__.py line 21......Declaration of the timestamp() function.
					
		Output 1 =>	inference/app.py line 425...................Declares the JSON Publisher
					inference/app.py line 401...................Publishes "state" to the JSON publisher. state = self._runner.forward(image=image, route=c_route),
																and self._runner = InferenceApplication._runner with _runner = runner = TFRunner (Line 349).
																Therefore InferenceApplication.TFRunner.forward(image=image, route=c_route)
					inference/app.py line 306...................Location of the TFRunner class. Line 306 is the location of the forward() function that execs above as .forward(image=image, route=c_route)
					
		Output 2 =>	inference/app.py line 427...................Declares the Local IPC Server
					inference/app.py line 377...................Loads (self._runner.get_errors()) to the IPC Server that will later be sent, by request.
					common/byodr/utils/__init__.py line 73......Declares the get_errors() function.

	Zerotier:
		Input => 	Data from the router and Zerotier client.
		
		Output =>	Encrypted data.
		
	Wireguard:
		Input => 	Data from the router and wireguard client.
		
		Output =>	Encrypted data.
			
	Teleop:
		Input 1 => 	teleop/app.py line 98.......................Declares the AI camera Camera Thread of this service

		Input 2 => 	teleop/app.py line 99.......................Declares the Operator camera Camera Thread of this service
	
		Input 3 => 	teleop/app.py line 100......................Declares the Pilot JSON Receiver of this service
					teleop/app.py line 160......................Receives the data with pilot.peek(). peek() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 103)
					pilot/app.py line 147.......................Declares the JSON Publisher
					pilot/app.py line 116.......................Publishes "pilot" to the JSON publisher. pilot = self._processor.next_action(*commands),
																and self._processor = PilotApplication._processor with _processor being CommandProcessor (Line 134).
																Therefore PilotApplication.CommandProcessor.next_action(*commands)
					pilot/core.py line 862......................Location of the CommandProcessor class. Line 862 is the next_action() function that execs above as .next_action(*commands)

		Input 4 => 	teleop/app.py line 101......................Declares the Vehicle JSON Receiver of this service
					vehicles/carla09/app.py line 195............Declares the JSON Publisher
					vehicles/carla09/app.py line 170............Publishes "runner.state()" to the JSON publisher. runner = CarlaApplication._runner,
																and _runner = CarlaRunner, therefore publishes CarlaApplication.CarlaRunner.state().
																CarlaApplication.CarlaRunner.state() returns self._vehicle.state() and
																self._vehicle is CarlaHandler, therefore CarlaHandler.state().
					vehicles/carla09/vehicle.py line 227........Location of the CarlaHandler class. Line 227 is the state() function that execs above as .state()

		Input 5 => 	teleop/app.py line 102......................Declares the Inference JSON Receiver of this service.
					inference/app.py line 425...................Declares the JSON Publisher
					inference/app.py line 401...................Publishes "state" to the JSON publisher. state = self._runner.forward(image=image, route=c_route),
																and self._runner = InferenceApplication._runner with _runner = runner = TFRunner (Line 349).
																Therefore InferenceApplication.TFRunner.forward(image=image, route=c_route)
					inference/app.py line 306...................Location of the TFRunner class. Line 306 is the location of the forward() function that execs above as .forward(image=image, route=c_route)

		Input 6 => 	?
		
		Input 7 =>	teleop/app.py line 121......................Declares the ZeroMQ client that can send and receive JSON data from the respective URLs.
					teleop/app.py line 131/134..................Requests data from the URLs, and gets data using call().
					pilot/app.py line 148.......................Declares the Local IPC Server
					pilot/app.py line 94........................Loads (_errors + self._processor.get_errors()) to the IPC Server that will later be sent, by request.
					inference/app.py line 427...................Declares the Local IPC Server
					inference/app.py line 377...................Loads (self._runner.get_errors()) to the IPC Server that will later be sent, by request.
					vehicles/carla09/app.py line 196............Declares the Local IPC Server
					vehicles/carla09/app.py line 144............Loads (self._runner.get_errors(), self._capabilities()) to the IPC Server that will later be sent, by request.
					vehicles/carla09/app.py line 132............Declares the _capabilities() function that is called above.
					common/byodr/utils/ipc.py line 272..........Location of JSONZmqClient class, that the ZeroMQ client uses to declare itself above.
					common/byodr/utils/__init__.py line 73......Declares the get_errors() function that is called above.
					
		Output 1 =>	?
		
		Output 2 => teleop/app.py line 164/165..................These 2 lines instantiate the AI camera and Operator camera streams respectively in the web app.
		
		Output 3 =>	teleop/app.py line 164/165..................In the same lines as above, the 2 created camera streams convert the camera streams into MJPEG streams.
		
		Output 4 => teleop/app.py line 155......................In the Application, loggers are embedded
		
		Output 5 => teleop/app.py line 118......................Declares the JSON Publisher.
					teleop/app.py line 158......................Publishes "fn_control=teleop_publish" to the JSON publisher.
					teleop/app.py line 140......................The teleop_publish(cmd) function is declared. It returns "cmd['navigator'] = dict(route=route_store.get_selected_route())".
																route_store is a ReloadableDataSource() class object, and get_selected_route() is a function of this class.
					common/byodr/utils/navigate.py line 294.....Declaration of the ReloadableDataSource() class.
					common/byodr/utils/navigate.py line 327.....Declaration of get_selected_route() function that is called above.
		
		Output 6 => teleop/app.py line 120......................Declares the JSON Publisher.
					teleop/app.py line 127......................Publishes "fn_on_save=on_options_save" to the JSON publisher.
					teleop/app.py line 140......................The on_options_save() function is declared. It publishes time=timestamp(), command='restart'
					common/byodr/utils/__init__.py line 21......Declaration of the timestamp() function.
		
	Vehicle:
		Input 1 =>	vehicles/carla09/app.py line 191............Declares the Pilot JSON Receiver of this service
					vehicles/carla09/app.py line 197............Receives the data with pilot.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					pilot/app.py line 147.......................Declares the JSON Publisher
					pilot/app.py line 116.......................Publishes "pilot" to the JSON publisher. pilot = self._processor.next_action(*commands),
																and self._processor = PilotApplication._processor with _processor being CommandProcessor (Line 134).
																Therefore PilotApplication.CommandProcessor.next_action(*commands)
					pilot/core.py line 862......................Location of the CommandProcessor class. Line 862 is the next_action() function that execs above as .next_action(*commands)
				
		Input 2 =>	vehicles/carla09/app.py line 193............Declares the Teleop chatter JSON Receiver of this service
					vehicles/carla09/app.py line 199............Receives the data with ipc_chatter.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 120......................Declares the JSON Publisher.
					teleop/app.py line 127......................Publishes "fn_on_save=on_options_save" to the JSON publisher.
					teleop/app.py line 140......................The on_options_save() function is declared. It publishes time=timestamp(), command='restart'
					common/byodr/utils/__init__.py line 21......Declaration of the timestamp() function.
					
				
		Input 3 =>	vehicles/carla09/app.py line 192............Declares the Teleop JSON Receiver of this service
					vehicles/carla09/app.py line 198............Receives the data with teleop.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 118......................Declares the JSON Publisher
					teleop/app.py line 158......................Publishes "fn_control=teleop_publish" to the JSON publisher.
					teleop/app.py line 140......................The teleop_publish(cmd) function is declared. It returns "cmd['navigator'] = dict(route=route_store.get_selected_route())".
																route_store is a ReloadableDataSource() class object, and get_selected_route() is a function of this class.
					common/byodr/utils/navigate.py line 294.....Declaration of the ReloadableDataSource() class.
					common/byodr/utils/navigate.py line 327.....Declaration of get_selected_route() function that is called above.

		Output 1 =>	vehicles/carla09/app.py line 195............Declares the JSON Publisher.
					vehicles/carla09/app.py line 170............Publishes "runner.state()" to the JSON publisher. runner = CarlaApplication._runner,
																and _runner = CarlaRunner, therefore publishes CarlaApplication.CarlaRunner.state().
																CarlaApplication.CarlaRunner.state() returns self._vehicle.state() and
																self._vehicle is CarlaHandler, therefore CarlaHandler.state().
					vehicles/carla09/vehicle.py line 227........Location of the CarlaHandler class. Line 227 is the state() function that execs above as .state()
					
		Output 2 => vehicles/carla09/app.py line 196............Declares the Local IPC Server
					vehicles/carla09/app.py line 144............Loads (self._runner.get_errors(), self._capabilities()) to the IPC Server that will later be sent, by request.
					vehicles/carla09/app.py line 132............Declares the _capabilities() function that is called above.
					common/byodr/utils/__init__.py line 73......Declares the get_errors() function.
	
	ROS Node:
		Input 1 =>	rosnode/app.py line 118.....................Declares the Pilot JSON Receiver of this service
					rosnode/app.py line 121.....................Receives the data with pilot.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					pilot/app.py line 147.......................Declares the JSON Publisher
					pilot/app.py line 116.......................Publishes "pilot" to the JSON publisher. pilot = self._processor.next_action(*commands),
																and self._processor = PilotApplication._processor with _processor being CommandProcessor (Line 134).
																Therefore PilotApplication.CommandProcessor.next_action(*commands)
					pilot/core.py line 862......................Location of the CommandProcessor class. Line 862 is the next_action() function that execs above as .next_action(*commands)
					
		Input 2 =>	rosnode/app.py line 119.....................Declares the Teleop chatter JSON Receiver of this service
					rosnode/app.py line 122.....................Receives the data with ipc_chatter.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 120......................Declares the JSON Publisher.
					teleop/app.py line 127......................Publishes "fn_on_save=on_options_save" to the JSON publisher.
					teleop/app.py line 140......................The on_options_save() function is declared. It publishes time=timestamp(), command='restart'
					common/byodr/utils/__init__.py line 21......Declaration of the timestamp() function.
		
		Output 1 =>	rosnode/app.py line 117.....................Declares the Pilot JSON Publisher.
					rosnode/app.py line 120.....................Publishes "m" to the JSON publisher.

	Pilot:
		Input 1= >	pilot/app.py line 136.......................Declares the Teleop JSON Receiver of this service
					pilot/app.py line 142.......................Receives the data with teleop.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 118......................Declares the JSON Publisher
					teleop/app.py line 158......................Publishes "fn_control=teleop_publish" to the JSON publisher.
					teleop/app.py line 140......................The teleop_publish(cmd) function is declared. It returns "cmd['navigator'] = dict(route=route_store.get_selected_route())".
																route_store is a ReloadableDataSource() class object, and get_selected_route() is a function of this class.
					common/byodr/utils/navigate.py line 294.....Declaration of the ReloadableDataSource() class.
					common/byodr/utils/navigate.py line 327.....Declaration of get_selected_route() function that is called above.
					
		Input 2 =>	pilot/app.py line 137.......................Declares the Rosnode JSON Receiver of this service
					pilot/app.py line 143.......................Receives the data with ros.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					rosnode/app.py line 117.....................Declares the Pilot JSON Publisher.
					rosnode/app.py line 120.....................Publishes "m" to the JSON publisher.
					
		Input 3 =>	pilot/app.py line 138.......................Declares the Vehicle JSON Receiver of this service
					pilot/app.py line 144.......................Receives the data with vehicle.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					vehicles/carla09/app.py line 195............Declares the JSON Publisher.
					vehicles/carla09/app.py line 170............Publishes "runner.state()" to the JSON publisher. runner = CarlaApplication._runner,
																and _runner = CarlaRunner, therefore publishes CarlaApplication.CarlaRunner.state().
																CarlaApplication.CarlaRunner.state() returns self._vehicle.state() and
																self._vehicle is CarlaHandler, therefore CarlaHandler.state().
					vehicles/carla09/vehicle.py line 227........Location of the CarlaHandler class. Line 227 is the state() function that execs above as .state()

		Input 4 =>	pilot/app.py line 139.......................Declares the Inference JSON Receiver of this service
					pilot/app.py line 145.......................Receives the data with inference.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					inference/app.py line 425...................Declares the JSON Publisher
					inference/app.py line 401...................Publishes "state" to the JSON publisher. state = self._runner.forward(image=image, route=c_route),
																and self._runner = InferenceApplication._runner with _runner = runner = TFRunner (Line 349).
																Therefore InferenceApplication.TFRunner.forward(image=image, route=c_route)
					inference/app.py line 306...................Location of the TFRunner class. Line 306 is the location of the forward() function that execs above as .forward(image=image, route=c_route)

		Input 5 =>	pilot/app.py line 140.......................Declares the IPC Chatter JSON Receiver of this service
					pilot/app.py line 146.......................Receives the data with ipc_chatter.get(). get() is a function of JSON Receivers found in common/byodr/utils/ipc.py (Line 97)
					teleop/app.py line 120......................Declares the JSON Publisher.
					teleop/app.py line 127......................Publishes "fn_on_save=on_options_save" to the JSON publisher.
					teleop/app.py line 140......................The on_options_save() function is declared. It publishes time=timestamp(), command='restart'
					common/byodr/utils/__init__.py line 21......Declaration of the timestamp() function.
					
		Input 6 => 	pilot/core.py line 35.......................Declares the class that includes all sources of control for the segment, including human.
					pilot/core.py line 59.......................Declares the class that instantiates all inputs from a controller (?).
					pilot/core.py line 330......................Declares the class that controls the segment using user input (?).

		Output 1 =>	pilot/app.py line 147.......................Declares the JSON Publisher
					pilot/app.py line 116.......................Publishes "pilot" to the JSON publisher. pilot = self._processor.next_action(*commands),
																and self._processor = PilotApplication._processor with _processor being CommandProcessor (Line 134).
																Therefore PilotApplication.CommandProcessor.next_action(*commands)
					pilot/core.py line 862......................Location of the CommandProcessor class. Line 862 is the next_action() function that execs above as .next_action(*commands)
					
		Output 2 =>	pilot/app.py line 148.......................Declares the Local IPC Server
					pilot/app.py line 94........................Loads (_errors + self._processor.get_errors()) to the IPC Server that will later be sent, by request.
					common/byodr/utils/__init__.py line 73......Declares the get_errors() function.

	MongoDB:
		Input =>	Gets input from logger processes in other services.
		
		Output =>	Stores the logs into its internal database.

	FTPD:
		Input =>	Gets files from the segment and from the training server for storage.
		
		Output =>	Sends those files to the training server or the segment.






Uncertainty about specific actions of a service:
	Teleop Input 1/2: 	How does the Stream service of the Pi create the camera threads to send the streams over to this service?
	Teleop Input 6: 	How does this service receive input from the controller, if it does?
	Teleop Output 4:	Not certain about this.
	Teleop Output 6:	What does command='restart' do?
	ROS Node Output 1:	What does "m" include?
	Pilot Input 6:		How does this service exactly get input from the user?
	MongoDB:			How does the DB get the data that it stores?
	FTPD:				How does the ftp server get the data that it stores?
	Servos:				How does this service receive movement commands from other services?









